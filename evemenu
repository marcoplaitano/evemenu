#!/bin/env bash

# File:   evemenu
# Author: Marco Plaitano  https://github.com/marcoplaitano
# Date:   01 Aug 2022
# Brief:  This script lets you interact with a custom actions menu
#         based on dmenu.


################################################################################
###  APPEARANCE
################################################################################

font="monospace-12"
nb="#262626"        # Normal Background
nf="#AAAAAA"        # Normal Foreground
sb="#447375"        # Selected Background
sf="#FFFFFF"        # Selected Foreground


################################################################################
###  ACTIONS
################################################################################

# Key-Value pairs in which:
# Key   = name of the action
# Value = routine to perform
declare -A actions=(
    # Open links in web browser
    [amazon]="firefox amazon.com"
    [github]="firefox github.com"
    [gmail]="firefox mail.google.com/mail/u/0/#inbox"
    [lofi]="firefox youtube.com/watch?v=jfKfPfyJRdk"
    [netflix]="firefox netflix.com/browse"
    [speedtest]="firefox speedtest.net/run"
    [youtube]="firefox youtube.com"
    [whatsapp]="firefox web.whatsapp.com"

    # Launch GUI applications.
    [discord]="discord"
    [firefox]="firefox"
    [spotify]="spotify"
    [telegram]="Telegram"
    [screenshot]="xfce4-screenshooter"
    [settings]="xfce4-settings-manager"

    # Control system.
    [logout]="xfce4-session-logout --logout --fast"
    [nightmode]="night_mode.sh --on"  # Custom script.
    [poweroff]="poweroff"
    [reboot]="reboot"
    [suspend]="systemctl suspend"

    # Custom routines (defined below).
    [code]="_choose_code_dir"
    [dock]="_plank_dock"
    [kill]="_choose_kill_process"
    [search]="_search_online"
)


################################################################################
###  FUNCTIONS
################################################################################

# Show error message and stop the execution of the script.
_die() {
    local msg
    msg="$1"
    echo "$msg" >&2
    if [[ $TERM == dumb ]]; then
        notify-send "evemenu error" "$msg"
    fi
    exit 1
}

# Make sure that the script won't be executed more than once at a time.
_check_pid() {
    local pidfile
    pidfile="/tmp/evemenu.pid"
    if [[ -f "$pidfile" ]]; then
        pid=$(cat "$pidfile")
        # Process found, script already running, do not execute this.
        ps -p "$pid" &>/dev/null && _die "Script already running."
    fi
    # Script wasn't running, write its pid.
    echo $$ > "$pidfile"
}

# Run dmenu with the given options and list of choices.
_ask_dmenu() {
    local prompt list accept_all
    # Parse function's arguments.
    while [[ -n $1 ]]; do
        case "$1" in
            # Prompt to display.
            -p | --prompt)
                prompt="$2" ; shift ;;
            # List of choices.
            -l | --list)
                list="$2" ; shift ;;
            # Flag to accept any user input, without list of choices.
            --accept-all)
                accept_all=1 ;;
            # Discard any other argument.
            *) ;;
        esac
        shift
    done

    # Ask for any user input, without presenting a list of choices.
    if [[ $accept_all == 1 ]]; then
        echo $(dmenu -p "$prompt" -i -fn $font -nb $nb -nf $nf -sb $sb -sf $sf)
    # Ask for a choice from the list.
    else
        echo $(echo -e "$list" | \
                dmenu -p "$prompt" -i -fn $font -nb $nb -nf $nf -sb $sb -sf $sf)
    fi
}


################################################################################
###  ROUTINES
################################################################################

### CALLED BY ACTION "dock"
# Relaunch plank dock.
_plank_dock() {
    killall plank
    plank &>/dev/null
}

### CALLED BY ACTION "kill"
# Choose a process to kill.
_choose_kill_process() {
    local processes process
    # Ask for a process to kill. It can be any value, even one not listed here.
    processes="firefox\nplank\nredshift\nspotify\nvlc"
    process=$(_ask_dmenu -p "which process?" -l $processes)
    [[ -z $process ]] && return

    killall "$process"
}

### CALLED BY ACTION "search"
# Google something.
_search_online() {
    local query
    query=$(_ask_dmenu -p "search for?" --accept-all)
    [[ -z $query ]] && return

    firefox "https://www.google.com/search?q=${query// /+}"
}

### CALLED BY ACTION "code"
# Choose a directory to open in a new VS Code window.
_choose_code_dir() {
    local root_dir dirs_string dir
    root_dir="$HOME/Desktop"  # Where to look for directories to open.

    # Append all possible directories to one string.
    dirs_string="default\nempty"
    for dir in $(find "$root_dir" -mindepth 1 -maxdepth 1 -type d); do
        dirs_string+="\n"$(basename "$dir")
    done
    # Ask which directory to open.
    dir=$(_ask_dmenu -p "directory:" -l "$dirs_string")
    [[ -z $dir ]] && return

    if [[ "$dir" == "empty" ]]; then
        code -n                             # Open an empty window.
    elif [[ "$dir" == "default" ]]; then
        code                                # Open last active workspace.
    elif [[ -d "$root_dir"/"$dir" ]]; then
        code "$root_dir"/"$dir"             # Open chosen directory.
    fi
}


################################################################################
###  MAIN
################################################################################

# Make sure that the script won't be executed more than once at a time.
_check_pid

# Sort the dictionary keys in alphabetical order and create one long string,
# separating them with '\n'
keys=( $( echo ${!actions[@]} | tr ' ' $'\n' | sort ) )
for k in "${keys[@]}"; do
    choices+="$k\n"
done
# Remove last 2 characters (an exceeding \n).
choices=${choices::-2}

# The user chooses the action to perform via dmenu.
selected=$(_ask_dmenu --prompt "run:" --list "$choices")
[[ -z $selected ]] && exit

# Execute the selected action.
if [[ -v actions[$selected] ]]; then
    ${actions[$selected]} & exit
else
    _die "Action '$selected' not found."
fi
