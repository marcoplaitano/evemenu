#!/bin/env bash

# File:   evemenu
# Author: Marco Plaitano  https://github.com/marcoplaitano
# Date:   01 Aug 2022
# Brief:  Let the user launch anything via dmenu.
#
# Copyright (c) 2023 Marco Plaitano


##################################################
#                DMENU APPEARANCE                #
##################################################

font="monospace-12"

# Background.
nb="#262626"
# Foreground.
nf="#aaaaaa"
# Selected item background.
sb="#447375"
# Selected item foreground.
sf="#ffffff"



##################################################
#                    ACTIONS                     #
##################################################

_WEBBROWSER=${WEBBROWSER:=firefox}
_CALCULATOR=${CALCULATOR:=mate-calc}

# Key-Value pairs in which:
# Key   = name of the action.
# Value = command to perform.
declare -A actions=(
    [all]="_ask_dmenu -p run:"              # Launch regular instance of dmenu.
    [amazon]="$_WEBBROWSER amazon.com"
    [appearance]="xfce4-appearance-settings"
    [calculator]="$CALCULATOR"
    [code]="_choose_code_dir"
    [discord]="discord"
    [drive]="_choose_google_account drive.google.com/drive my-drive"
    [firefox]="firefox"
    [github]="$_WEBBROWSER github.com"
    [instagram]="$_WEBBROWSER instagram.com"
    [kill]="_choose_kill_process"
    [lofi]="$_WEBBROWSER https://www.youtube.com/watch?v=jfKfPfyJRdk"
    [logout]="xfce4-session-logout"
    [mail]="_choose_google_account mail.google.com/mail \#inbox"
    [mousepad]="mousepad"
    [netflix]="$_WEBBROWSER netflix.com/browse"
    [nightmode]="night_mode.sh --now"
    [notion]="$_WEBBROWSER notion.so"
    [poweroff]="poweroff"
    [redshift]="redshift -x && redshift"
    [screenshot]="xfce4-screenshooter"
    [search]="_search_online"
    [session]="xfce4-session-settings"
    [settings]="xfce4-settings-manager"
    [screenrecorder]="simplescreenrecorder"
    [speedtest]="$_WEBBROWSER speedtest.net/run"
    [spotify]="spotify"
    [telegram]="Telegram"
    [youtube]="$_WEBBROWSER youtube.com"
    [whatsapp]="$_WEBBROWSER https://web.whatsapp.com"
)



##################################################
#                    FUNCTIONS                   #
##################################################

# Show error message and stop the execution of the script.
_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}

# Run dmenu with the given options and list of choices.
_ask_dmenu() {
    local prompt list multiple_lines accept_all lines
    # Parse function's arguments.
    while [[ -n $1 ]]; do
        case "$1" in
            # Prompt to display.
            -p | --prompt)
                prompt="$2" ; shift ; shift ;;
            # List of choices.
            -l | --list)
                list="$2" ; shift ; shift ;;
            # Display each choice on a new line.
            --multiple-lines)
                multiple_lines=true ; shift ;;
            # Accept any user input, without presenting a list of choices.
            --accept-all)
                accept_all=true ; shift ;;
            # Discard any other argument.
            *)
                shift ;;
        esac
    done

    lines=0
    # If requested, calculate the number of lines in the list string.
    if [[ $multiple_lines == true ]]; then
        lines=$(echo -e "$list" | wc -l)
    fi

    # Ask for any input.
    if [[ $accept_all == true ]]; then
        echo $(dmenu -p "$prompt" -i -fn $font -nb $nb -nf $nf -sb $sb -sf $sf)
    # Launch regular dmenu (with a list of all system applications).
    elif [[ -z $list ]]; then
        echo $(dmenu_run -p "$prompt" -i -fn $font -nb $nb -nf $nf -sb $sb -sf $sf)
    # Ask for a choice from the list.
    else
        echo $(echo -e "$list" | dmenu -p "$prompt" -l $lines -i -fn $font -nb $nb -nf $nf -sb $sb -sf $sf)
    fi
}



##################################################
#                    ROUTINES                    #
##################################################

### CALLED BY ACTION "code"
# Choose a directory to open in a new VS Code window.
_choose_code_dir() {
    local dirs_string dir _CODE_ROOT_DIR
    _CODE_ROOT_DIR="$HOME/Desktop"  # Were to look for projects to open.

    # Append all possible directories to one string.
    dirs_string="default\nempty"
    for dir in $(find "$_CODE_ROOT_DIR" -maxdepth 1 -type d); do
        [[ "$dir" == "$_CODE_ROOT_DIR" ]] && continue
        dirs_string+="\n"$(basename "$dir")
    done

    # Ask which directory to open.
    dir=$(_ask_dmenu -p "directory:" -l "$dirs_string" --multiple-lines)
    [[ -z $dir ]] && exit

    # Open an empty window.
    if [[ "$dir" == "empty" ]]; then
        code -n
    # "default" will open a window with last active workspace.
    elif [[ "$dir" == "default" ]]; then
        code
    elif [[ -d "$_CODE_ROOT_DIR"/"$dir" ]]; then
        code "$_CODE_ROOT_DIR"/"$dir"
    fi
}

### CALLED BY ACTION "kill"
# Choose a process to kill.
_choose_kill_process() {
    local processes process
    # Ask for a process to kill. It can be any value, even one not listed here.
    processes="firefox\nplank\nredshift\nspotify"
    process=$(_ask_dmenu -p "which process?" -l $processes)
    killall "$process"
}

### CALLED BY ACTIONS "drive", "mail"
# Choose which account to open the given Google's site with.
# When multiple accounts are active in the same browser, Google will assign
# a number to each one, going from 0 to N-1
_choose_google_account() {
    local accounts account num
    accounts="personal\nwork"
    account=$(_ask_dmenu -p "which account?" -l $accounts)
    [[ -z $account ]] && exit
    # Argument $1 is the site to open (either gmail, Drive, Photos, ...) and,
    # eventually, $2 is the specific page view in the site.
    case $account in
        personal)  num=0 ;;
        work)      num=1 ;;
    esac
    $_WEBBROWSER "https://$1/u/$num/$2"
}

### CALLED BY ACTION "search"
# Google something.
_search_online() {
    local query url domains
    query=$(_ask_dmenu -p "search for?" --accept-all)
    [[ -z $query ]] && exit
    url="https://www.google.com/search?q=${query// /+}"
    domains=("com" "it" "gov" "en" "org")
    for domain in "${domains[@]}"; do
        if [[ $query == *.$domain ]]; then
            url="https://$query"
            break
        fi
    done
    $_WEBBROWSER "$url"
}



##################################################
#                      MAIN                      #
##################################################

# Sort the keys in alphabetical order and create one long string, separating
# them with a '\n'.
keys=( $( echo ${!actions[@]} | tr ' ' $'\n' | sort ) )
for k in "${keys[@]}"; do
    choices+="$k\n"
done
# Remove last 2 characters (an exceeding \n).
choices=${choices::-2}

# The user chooses the action to perform via dmenu.
selected=$(_ask_dmenu -p "run:" -l "$choices")
[[ -z $selected ]] && exit

# Execute the chosen action.
if [[ -v actions[$selected] ]]; then
    ${actions[$selected]} & exit
else
    _die "Action '$selected' not found."
fi
